# Neo4j database version: Community (4.1.1)

###
# Must conform to 'dbms.directories.data' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.directories.data
# If the values of keys 'dbms.directories.neo4j_home' and 'dbms.default_database' (below) have not been modified then the database would be created at path: 
# 	'lib/neo4j-community-4.1.1/<database>/databases/neo4j'
###
database = spade.graph

# To create a database at a different path, change the value of key 'database' only and the database would be created at path: 'lib/neo4j-community-4.1.1/<database>/databases/neo4j'

### MODIFY THE CONFIGURATION BELOW AT YOUR OWN RISK!
### MODIFY THE CONFIGURATION BELOW AT YOUR OWN RISK!
### MODIFY THE CONFIGURATION BELOW AT YOUR OWN RISK!

###
# Root path of the database. Resolved according to current working directory (i.e. SPADE HOME) if not absolute.
# Must conform to 'dbms.directories.neo4j_home' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.directories.neo4j_home
# Cannot be modified for Neo4j Community edition when using the browser.
###
dbms.directories.neo4j_home = lib/neo4j-community-4.1.1

###
# Must conform to 'dbms.default_database' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.default_database
# Cannot be modified for Neo4j Community edition with Java API.
###
dbms.default_database = neo4j

###
# Current Neo4j version Database path construction convention: '<dbms.directories.neo4j_home>/<database>/databases/<dbms.default_database>'
###

###
# Path to the configuration file for Neo4j database tuning.
# Must exist.
###
neo4jConfigFilePath = cfg/neo4j.properties

###
# Configuration for caches for vertices being put into the storage
###
vertex.bloomfilter.false_positive_probability=0.000001
vertex.bloomfilter.expected_elements=1000000
vertex.cache.max_size=10000

###
# Configuration for caches for edges being put into the storage
###
edge.bloomfilter.false_positive_probability=0.000001
edge.bloomfilter.expected_elements=1000000
edge.cache.max_size=10000

###
# Indexing options. Allowed values:
# 1) all = index all annotations as they are seen
# 2) none = No indexing
###
index.vertex = all
index.edge = all

###
# The number of tasks to buffer before committing them to the database.
# Must be a non-negative number.
# Set to '0' to commit after every task.
###
flushBufferSize = 100000

###
# The number of seconds after which the tasks must be committed to the database (if the task buffer never fills up)
# Must be a non-negative number.
###
flushAfterSeconds = 240

###
# Number of times to retry continuing in case of errors. Storage shuts down if the value exceeds.
# Must be a non-negative number.
# Set to '0' to stop at the first error.
###
maxRetries = 10

###
# Whether to debugging information or not. Useful for detailed errors in the SPADE log.
# Must be a boolean.
###
debug = true

###
# Number of seconds to wait before reporting storage stats.
# Must be a number. 
# If the value is not a positive number then no reporting is done.
###
reportingIntervalSeconds=360

###
# Number of milliseconds to sleep for between task executions. 
# Must be a positive number.
###
sleepWaitMillis = 10

###
# Number of seconds to wait for index to get built. [UNUSED].
# Must be a non-negative number.
###
waitForIndexSeconds = 10

###
# Reserved property key name to store the hash of vertices and edges with in the database.
# Must be a non-blank string and should not collide with any annotation key in either vertices or edges.
###
hashPropertyName = hash

###
# Reserved property key name to store the querying metadata of edges with in the database.
# Must be a non-blank string and should not collide with any annotation key in edges.
###
edgeSymbolsPropertyName = spade_edge_symbols

###
# What to do if an annotation key matches the value of 'hashPropertyKey' or 'edgeSymbolsPropertyKey'.
# Allowed values:
# 1) discard = discard the offending vertex or edge and continue
# 2) remove = remove only the offending annotation key and value from vertex or edge and continue
# Turn on 'debug' to log whenever any of the above action occurs.
###
hashKeyCollisionAction = remove

###
# Name of the primary label on vertices (case sensitive)
# Must be a non-blank string.
###
nodePrimaryLabel = VERTEX

###
# Name of the relationship type on edges (case sensitive)
# Must be a non-blank string.
###
edgeRelationshipType = EDGE

###
# Shutdown even if there is data that is not flushed. Data in buffer discarded
###
forceShutdown = true

###
# Do not fill the internal task buffer more than this number. Set to a negative number to NOT put any limit on the buffer.
###
bufferLimit = -1
