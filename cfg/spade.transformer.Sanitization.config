# The structure of the file is as follows:
# 'sanitizationLevel' indicates the level of sanitization to perform on the response graph.
# sanitization level could be low, medium or high.
# For a given level of sanitization, provenance is individually sanitized for that level.
# For example, if the level defined is high, provenance is sanitized for the high level only.
# Sanitization is done according to the strategy programmed in the transformer source code.

# One line in the file contains the sanitization level, followed by a comma-separated list of annotations to sanitize.
# Each annotation could be followed by the names of custom code handlers for sanitization in square
# brackets, like this:
# <annotation_name>[sanitizationHandler]
# In the absence of these code handlers, the annotation would be sanitized with the default strategy.

# Following are the various strategies for sanitizing composite annotations...
# remote/local address: (xxx.xxx.xxx.xxx)
# 'low', the second octet is sanitized.
# 'medium', the third octet is sanitized.
# 'high', the fourth octet is sanitized.

# path: (w/x/y/z/...)
# 'low', path after the first level is sanitized.
# 'medium', path after the second level is sanitized.
# 'high', path after the third level is sanitized.

# time: (yyyy-MM-dd HH:mm:ss)
# 'low', day is sanitized.
# 'medium', hour is sanitized.
# 'high', minute, second and millisecond are sanitized.

sanitizationLevel=low

low
cwd,fsgid,fsuid,sgid,suid,remote address[sanitizeIpAddress],path[sanitizePath],time[sanitizeTime]

medium
command line,uid,gid,remote address[sanitizeIpAddress],path[sanitizePath],time[sanitizeTime],size

high
name,euid,remote address[sanitizeIpAddress],path[sanitizePath],time[sanitizeTime],operation
